<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

<!--
  Copyright (c) 2011 Mateusz Loskot <mateusz@loskot.net>
  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
  
  Parts of debugger visualizers for Microsoft Visual Studio 11.
  Purpose: miscellaneous libraries
  Usage: Copy the file to %USERPROFILE%\My Documents\Visual Studio Dev11\Visualizers\
-->

<!--
*** BEGIN IMPORTANT NOTE *** 
The comment below  with .natvis guide was stolen from Microsoft Visual Studio 11 file:
	%VSINSTALLDIR%\Common7\Packages\Debugger\Visualizers\defaultvis.natvis
I do not claim copyright or any legal responsibilities for this comment.
I copied it here because there is no documentation publicly available on MSDN
for the new style XML-based debugger visualizers in Visual Studio 11.
*** END IMPORTANT NOTE *** 

For Dev 11 local and remote native debugging, the defaultvis.natvis replaces the autoexp.dat
file for native type visualization. This feature has been redesigned to
1) give better diagnostic reporting.
  a) Set the name-value entry under the Debugger registry key: EnableNatvisDiagnostics which is a REG_DWORD to a value of 1 
     this will output each expression string that is evaluated under the native visualizer into the output window and is good 
     for debugging type definition typos in .natvis files.
2) provide a documented schema to to adhere to when defining type definition.
  a) C:\Program Files\Microsoft Visual Studio 11.0\Xml\Schemas\natvis.xsd
3) support of multiple files for type definition in two locations:
  a) C:\Program Files\Microsoft Visual Studio 11.0\Common7\Packages\Debugger\Visualizers\defaultvis.natvis, this location 
     requires admin privilage to write to.
  b) %USERPROFILE%\My Documents\Visual Studio Dev11\Visualizers\xxx.natis, does not require admin privilage to write file to

Syntax explanation - for more comprehensive syntax documentation, look at the schema
1)
  <Type Name="tagPOINT">   // The type that you are defining customed visualization for
    <AlternativeType Name="CPoint"></AlternativeType> // Another type that you want to share this customed visualization with
    <DisplayString>{{x={x} y={y}}}</DisplayString> // Use trace call convention, everything inside {} get evaluated
  </Type>

<Type Name="ATL::CComBSTR">
    <DisplayString>{m_str,bstr}</DisplayString> // DispayString customizes the parent item in the watch/locals/autos window.
    <StringView>m_str,bstr</StringView> // StringView customizes the string viewer
  </Type>

  <Type Name="std::auto_ptr&lt;*&gt;">
    // If there is no conditional expression, by default it is evaluated to true and that DisplayString is used to customize the
    // parent item. If there are more than one DisplayString entries, then they are evaluated in order until one evaluates to true
    // and that DisplayString is used for customization.
    <DisplayString Condition="_Myptr == 0">empty</DisplayString>
    <DisplayString>auto_ptr {*_Myptr}</DisplayString>
    
    // The expand node customizes the children that is being shown when you expand the parent item in the watch/locals/autos window.
    <Expand>
      // You can have multiple item entries here and each item can have a conditional expression that decides if that item
      // should show up or not as a child. Again, no conditional expression defined is treated as true by default, so that item will always be be displayed under the parent.
      <Item Condition="_Myptr != 0" Name="[ptr]">_Myptr</Item>
    </Expand>
  </Type>

  <Type Name="std::valarray&lt;*&gt;">
    <DisplayString>{{size = {_Mysize}}}</DisplayString>
    <Expand>
      // This customizes visualization for an array
      <ArrayItems>
        <Size>_Mysize</Size> // Tell EE how to find the size of the array, can be a variable or a hardcode integer like 5
        <ValuePointer>_Myptr</ValuePointer> // Tell EE where is the item value for display
      </ArrayItems>
    </Expand>
  </Type>

<Type Name="std::forward_list&lt;*&gt;">
    <Expand>
      // This customizes visualization for a linked list
      <LinkedListItems>
        <HeadPointer>_Myhead</HeadPointer> // The head pointer of the linked list
        <NextPointer>_Next</NextPointer>  // The next pointer of the linked list
        <ValueNode>_Myval</ValueNode> // The node that contains the item value for display
      </LinkedListItems>
    </Expand>
  </Type>

  <Type Name="Concurrency::combinable&lt;*&gt;">
    <Expand>
      <Item Name="InitFunction">_M_fnInitialize</Item>
      // This is a more generalized form of ArrayItems to support cases where you need to manipulate the index to the value node,
      // such as doing a bitwise manipulation to compute the index to the value node.
      <IndexListItems>
        <Size>_M_size</Size>
        <ValueNode>*(_M_buckets[$i])</ValueNode>
      </IndexListItems>
      <LinkedListItems>
        <HeadPointer>this</HeadPointer> // Empty expression implies this pointer or explicitely call out this
        <NextPointer>_M_Chain</NextPointer>
        <ValueNode>_M_value</ValueNode>
      </LinkedListItems>
      </Expand>
      </Type>

  <Type Name="ATL::CRBTree&lt;*,*,*,*&gt;">
    ...
    <Expand>
      <Item Name="Count">m_nCount</Item>
      // This customizes visualization for binary trees
      <TreeItems>
        <Size>m_nCount</Size> // Tell EE how nodes the tree has
        <HeadPointer>m_pRoot</HeadPointer> // The head of the tree
        <LeftPointer>m_pLeft</LeftPointer> // Pointer to the left side of the tree
        <RightPointer>m_pRight</RightPointer> // Pointer to the right side of the tree
        // Must specified a conditional expression to indicate whether the value node currently evaluated is valid or not
        <ValueNode Condition="this != m_pLeft">*(CPair*)this</ValueNode>
      </TreeItems>
    </Expand>
  </Type>

  //It is also possible to write C++ code to customize the formatting of display strings.  For details on how to do this, see
  // http://msdn.microsoft.com/en-us/library/8fwk67y3(VS.71).aspx.
  //
  <Type Name="CFoo">
    <DisplayString Addin="AddInDll.dll" Export="View_CFoo"> //AddInDll.dll will be loaded from the directory containing the xml file for the type CFoo.  The implementation of the addin will be the export "View_CFoo".
    //This text is a fallback that will only get displayed if the addin fails to load or display the value.
    Value = {m_value}
    </DisplayString>
  </Type>
  

  // HRESULT visualization can be customized using the following syntax
  <HResult Name="S_OK"> // The name shown in the watch/locals/autos window
    <HRValue>0x00000000</HRValue>
  </HResult>
-->

<!-- TODO: here go miscellaneous templates -->

</AutoVisualizer>
